// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: comment_service.proto

package comment_service

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("comment_service.proto", fileDescriptor_be158f1888382e5c) }

var fileDescriptor_be158f1888382e5c = []byte{
	// 224 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4d, 0xce, 0xcf, 0xcd,
	0x4d, 0xcd, 0x2b, 0x89, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f,
	0xc9, 0x17, 0xe2, 0x47, 0x13, 0x96, 0xe2, 0x85, 0x0a, 0x40, 0xe4, 0x8d, 0xee, 0x30, 0x73, 0xf1,
	0x39, 0x43, 0x44, 0x82, 0x21, 0x2a, 0x84, 0x6c, 0xb8, 0xd8, 0x9c, 0x8b, 0x52, 0x13, 0x4b, 0x52,
	0x85, 0x24, 0xf4, 0xd0, 0x0d, 0x85, 0x2a, 0x95, 0xc2, 0x29, 0x03, 0xd2, 0x1d, 0x5a, 0x90, 0x42,
	0xae, 0x6e, 0x5f, 0x2e, 0x36, 0x97, 0xd4, 0x9c, 0xd4, 0x92, 0x54, 0x21, 0x25, 0x0c, 0x35, 0xee,
	0xa9, 0x25, 0x50, 0x65, 0x41, 0xa9, 0x85, 0xa5, 0xa9, 0xc5, 0x25, 0x52, 0xf2, 0x18, 0x6a, 0x20,
	0x9a, 0x53, 0x60, 0xc6, 0x39, 0x73, 0x31, 0xbb, 0xa7, 0x96, 0x10, 0x65, 0x16, 0x6e, 0x37, 0x85,
	0x73, 0xb1, 0xb9, 0xa7, 0x96, 0x38, 0xe6, 0xe4, 0x08, 0xa9, 0x62, 0x33, 0xc7, 0x31, 0x27, 0x07,
	0xcd, 0x28, 0x35, 0x42, 0xca, 0x8a, 0x0b, 0xf2, 0xf3, 0x8a, 0x53, 0x85, 0x12, 0xb9, 0x84, 0x11,
	0xee, 0x28, 0x76, 0xaa, 0x0c, 0xc8, 0x2f, 0x2e, 0xf1, 0x74, 0x21, 0xca, 0xb5, 0x44, 0x5a, 0xe1,
	0xa4, 0x75, 0xe2, 0x91, 0x1c, 0xe3, 0x85, 0x47, 0x72, 0x8c, 0x0f, 0x1e, 0xc9, 0x31, 0xce, 0x78,
	0x2c, 0xc7, 0x10, 0x25, 0x91, 0x9e, 0x9a, 0x07, 0x8e, 0x7a, 0x7d, 0x34, 0x13, 0x92, 0xd8, 0xc0,
	0xc2, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4a, 0x30, 0x67, 0xbc, 0x4a, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CommentServiceClient is the client API for CommentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CommentServiceClient interface {
	Create(ctx context.Context, in *Comment, opts ...grpc.CallOption) (*Comment, error)
	Update(ctx context.Context, in *Comment, opts ...grpc.CallOption) (*Comment, error)
	Delete(ctx context.Context, in *GetCommentRequest, opts ...grpc.CallOption) (*DeletedComment, error)
	Get(ctx context.Context, in *GetCommentRequest, opts ...grpc.CallOption) (*Comment, error)
	GetAll(ctx context.Context, in *GetAllCommentRequest, opts ...grpc.CallOption) (*GetAllCommentResponse, error)
	GetCommentsByPostID(ctx context.Context, in *GetCommentRequest, opts ...grpc.CallOption) (*GetAllCommentResponse, error)
}

type commentServiceClient struct {
	cc *grpc.ClientConn
}

func NewCommentServiceClient(cc *grpc.ClientConn) CommentServiceClient {
	return &commentServiceClient{cc}
}

func (c *commentServiceClient) Create(ctx context.Context, in *Comment, opts ...grpc.CallOption) (*Comment, error) {
	out := new(Comment)
	err := c.cc.Invoke(ctx, "/comment_service.CommentService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) Update(ctx context.Context, in *Comment, opts ...grpc.CallOption) (*Comment, error) {
	out := new(Comment)
	err := c.cc.Invoke(ctx, "/comment_service.CommentService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) Delete(ctx context.Context, in *GetCommentRequest, opts ...grpc.CallOption) (*DeletedComment, error) {
	out := new(DeletedComment)
	err := c.cc.Invoke(ctx, "/comment_service.CommentService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) Get(ctx context.Context, in *GetCommentRequest, opts ...grpc.CallOption) (*Comment, error) {
	out := new(Comment)
	err := c.cc.Invoke(ctx, "/comment_service.CommentService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) GetAll(ctx context.Context, in *GetAllCommentRequest, opts ...grpc.CallOption) (*GetAllCommentResponse, error) {
	out := new(GetAllCommentResponse)
	err := c.cc.Invoke(ctx, "/comment_service.CommentService/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) GetCommentsByPostID(ctx context.Context, in *GetCommentRequest, opts ...grpc.CallOption) (*GetAllCommentResponse, error) {
	out := new(GetAllCommentResponse)
	err := c.cc.Invoke(ctx, "/comment_service.CommentService/GetCommentsByPostID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommentServiceServer is the server API for CommentService service.
type CommentServiceServer interface {
	Create(context.Context, *Comment) (*Comment, error)
	Update(context.Context, *Comment) (*Comment, error)
	Delete(context.Context, *GetCommentRequest) (*DeletedComment, error)
	Get(context.Context, *GetCommentRequest) (*Comment, error)
	GetAll(context.Context, *GetAllCommentRequest) (*GetAllCommentResponse, error)
	GetCommentsByPostID(context.Context, *GetCommentRequest) (*GetAllCommentResponse, error)
}

// UnimplementedCommentServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCommentServiceServer struct {
}

func (*UnimplementedCommentServiceServer) Create(ctx context.Context, req *Comment) (*Comment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedCommentServiceServer) Update(ctx context.Context, req *Comment) (*Comment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedCommentServiceServer) Delete(ctx context.Context, req *GetCommentRequest) (*DeletedComment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedCommentServiceServer) Get(ctx context.Context, req *GetCommentRequest) (*Comment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedCommentServiceServer) GetAll(ctx context.Context, req *GetAllCommentRequest) (*GetAllCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (*UnimplementedCommentServiceServer) GetCommentsByPostID(ctx context.Context, req *GetCommentRequest) (*GetAllCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommentsByPostID not implemented")
}

func RegisterCommentServiceServer(s *grpc.Server, srv CommentServiceServer) {
	s.RegisterService(&_CommentService_serviceDesc, srv)
}

func _CommentService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Comment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment_service.CommentService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).Create(ctx, req.(*Comment))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Comment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment_service.CommentService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).Update(ctx, req.(*Comment))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment_service.CommentService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).Delete(ctx, req.(*GetCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment_service.CommentService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).Get(ctx, req.(*GetCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment_service.CommentService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).GetAll(ctx, req.(*GetAllCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_GetCommentsByPostID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).GetCommentsByPostID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment_service.CommentService/GetCommentsByPostID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).GetCommentsByPostID(ctx, req.(*GetCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CommentService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "comment_service.CommentService",
	HandlerType: (*CommentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _CommentService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _CommentService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _CommentService_Delete_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _CommentService_Get_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _CommentService_GetAll_Handler,
		},
		{
			MethodName: "GetCommentsByPostID",
			Handler:    _CommentService_GetCommentsByPostID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "comment_service.proto",
}
